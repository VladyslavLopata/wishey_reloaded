// Mocks generated by Mockito 5.0.17 from annotations
// in wishey/test/features/wishes_board/use_cases/get_wishes_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wishey/core/models/error_prone.dart' as _i2;
import 'package:wishey/core/models/sucess.dart' as _i6;
import 'package:wishey/core/models/wish_list.dart' as _i5;
import 'package:wishey/core/repositories/wishes_repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeErrorProne_0<T> extends _i1.Fake implements _i2.ErrorProne<T> {}

/// A class which mocks [WishesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWishesRepository extends _i1.Mock implements _i3.WishesRepository {
  MockWishesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ErrorProne<_i5.WishList>> getWishlist() =>
      (super.noSuchMethod(Invocation.method(#getWishlist, []),
              returnValue: Future<_i2.ErrorProne<_i5.WishList>>.value(
                  _FakeErrorProne_0<_i5.WishList>()))
          as _i4.Future<_i2.ErrorProne<_i5.WishList>>);
  @override
  _i4.Future<_i2.ErrorProne<_i6.Success>> saveWish(_i5.Wish? wish) =>
      (super.noSuchMethod(Invocation.method(#saveWish, [wish]),
              returnValue: Future<_i2.ErrorProne<_i6.Success>>.value(
                  _FakeErrorProne_0<_i6.Success>()))
          as _i4.Future<_i2.ErrorProne<_i6.Success>>);
  @override
  _i4.Future<_i2.ErrorProne<_i6.Success>> replaceWish(
          {_i5.Wish? toReplace, _i5.Wish? toBeReplacedWith}) =>
      (super.noSuchMethod(
              Invocation.method(#replaceWish, [],
                  {#toReplace: toReplace, #toBeReplacedWith: toBeReplacedWith}),
              returnValue: Future<_i2.ErrorProne<_i6.Success>>.value(
                  _FakeErrorProne_0<_i6.Success>()))
          as _i4.Future<_i2.ErrorProne<_i6.Success>>);
}
