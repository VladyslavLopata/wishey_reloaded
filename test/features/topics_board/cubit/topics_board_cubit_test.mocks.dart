// Mocks generated by Mockito 5.0.17 from annotations
// in wishey/test/features/topics_board/cubit/topics_board_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wishey/core/models/error_prone.dart' as _i2;
import 'package:wishey/features/topics_board/use_cases/get_topics.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeErrorProne_0<T> extends _i1.Fake implements _i2.ErrorProne<T> {}

/// A class which mocks [GetTopicsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopicsUseCase extends _i1.Mock implements _i3.GetTopicsUseCase {
  MockGetTopicsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ErrorProne<List<String>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue: Future<_i2.ErrorProne<List<String>>>.value(
                  _FakeErrorProne_0<List<String>>()))
          as _i4.Future<_i2.ErrorProne<List<String>>>);
  @override
  _i2.ErrorProne<T> executeErrorProne<T>(T Function()? function) =>
      (super.noSuchMethod(Invocation.method(#executeErrorProne, [function]),
          returnValue: _FakeErrorProne_0<T>()) as _i2.ErrorProne<T>);
  @override
  _i4.Future<_i2.ErrorProne<T>> executeErrorProneAsync<T>(
          _i4.Future<T> Function()? function) =>
      (super.noSuchMethod(
              Invocation.method(#executeErrorProneAsync, [function]),
              returnValue:
                  Future<_i2.ErrorProne<T>>.value(_FakeErrorProne_0<T>()))
          as _i4.Future<_i2.ErrorProne<T>>);
}
