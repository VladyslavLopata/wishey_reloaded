// Mocks generated by Mockito 5.0.17 from annotations
// in wishey/test/features/create_wish/cubit/create_wish_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;
import 'dart:ui' as _i19;

import 'package:auto_route/auto_route.dart' as _i5;
import 'package:auto_route/src/matcher/route_matcher.dart' as _i4;
import 'package:auto_route/src/router/controller/pageless_routes_observer.dart'
    as _i7;
import 'package:auto_route/src/router/controller/routing_controller.dart'
    as _i18;
import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wishey/core/models/error_prone.dart' as _i3;
import 'package:wishey/core/models/wish_list.dart' as _i9;
import 'package:wishey/core/router/auto_route.dart' as _i17;
import 'package:wishey/features/create_wish/use_cases/get_view_model.dart'
    as _i8;
import 'package:wishey/features/create_wish/use_cases/get_wish_topic.dart'
    as _i16;
import 'package:wishey/features/create_wish/use_cases/init_forms_storage.dart'
    as _i15;
import 'package:wishey/features/create_wish/use_cases/is_wish_valid.dart'
    as _i13;
import 'package:wishey/features/create_wish/use_cases/save_wish.dart' as _i14;
import 'package:wishey/features/create_wish/use_cases/should_show_save_button.dart'
    as _i12;
import 'package:wishey/features/create_wish/use_cases/update_field.dart'
    as _i10;
import 'package:wishey/features/create_wish/view_models/loaded_state_view_model.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLoadedStateViewModel_0 extends _i1.Fake
    implements _i2.LoadedStateViewModel {}

class _FakeErrorProne_1<T> extends _i1.Fake implements _i3.ErrorProne<T> {}

class _FakeRouteMatcher_2 extends _i1.Fake implements _i4.RouteMatcher {}

class _FakeRouteCollection_3 extends _i1.Fake implements _i4.RouteCollection {}

class _FakeRouteData_4 extends _i1.Fake implements _i5.RouteData {}

class _FakeAutoRoutePage_5<T> extends _i1.Fake implements _i5.AutoRoutePage<T> {
}

class _FakeNavigationHistory_6 extends _i1.Fake
    implements _i5.NavigationHistory {}

class _FakeLocalKey_7 extends _i1.Fake implements _i6.LocalKey {}

class _FakePagelessRoutesObserver_8 extends _i1.Fake
    implements _i7.PagelessRoutesObserver {}

class _FakeGlobalKey_9<T extends _i6.State<_i6.StatefulWidget>> extends _i1.Fake
    implements _i6.GlobalKey<T> {}

class _FakeStackRouter_10 extends _i1.Fake implements _i5.StackRouter {}

class _FakeRouteMatch_11<T> extends _i1.Fake implements _i5.RouteMatch<T> {}

class _FakeAutoRouteInformationProvider_12 extends _i1.Fake
    implements _i5.AutoRouteInformationProvider {}

class _FakeAutoRouterDelegate_13 extends _i1.Fake
    implements _i5.AutoRouterDelegate {}

class _FakeDefaultRouteParser_14 extends _i1.Fake
    implements _i5.DefaultRouteParser {}

class _FakeRoutingController_15 extends _i1.Fake
    implements _i5.RoutingController {}

/// A class which mocks [GetViewModelUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetViewModelUseCase extends _i1.Mock
    implements _i8.GetViewModelUseCase {
  MockGetViewModelUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoadedStateViewModel call(_i9.Wish? wish) => (super.noSuchMethod(
      Invocation.method(#call, [wish]),
      returnValue: _FakeLoadedStateViewModel_0()) as _i2.LoadedStateViewModel);
}

/// A class which mocks [UpdateFieldUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateFieldUseCase extends _i1.Mock
    implements _i10.UpdateFieldUseCase {
  MockUpdateFieldUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call({_i2.WishField? field, String? text}) => super.noSuchMethod(
      Invocation.method(#call, [], {#field: field, #text: text}),
      returnValueForMissingStub: null);
  @override
  _i3.ErrorProne<T> executeErrorProne<T>(T Function()? function) =>
      (super.noSuchMethod(Invocation.method(#executeErrorProne, [function]),
          returnValue: _FakeErrorProne_1<T>()) as _i3.ErrorProne<T>);
  @override
  _i11.Future<_i3.ErrorProne<T>> executeErrorProneAsync<T>(
          _i11.Future<T> Function()? function) =>
      (super.noSuchMethod(
              Invocation.method(#executeErrorProneAsync, [function]),
              returnValue:
                  Future<_i3.ErrorProne<T>>.value(_FakeErrorProne_1<T>()))
          as _i11.Future<_i3.ErrorProne<T>>);
}

/// A class which mocks [ShouldShowSaveButtonUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockShouldShowSaveButtonUseCase extends _i1.Mock
    implements _i12.ShouldShowSaveButtonUseCase {
  MockShouldShowSaveButtonUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool call() =>
      (super.noSuchMethod(Invocation.method(#call, []), returnValue: false)
          as bool);
}

/// A class which mocks [IsWishValidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsWishValidUseCase extends _i1.Mock
    implements _i13.IsWishValidUseCase {
  MockIsWishValidUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool call() =>
      (super.noSuchMethod(Invocation.method(#call, []), returnValue: false)
          as bool);
}

/// A class which mocks [SaveWishUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWishUseCase extends _i1.Mock implements _i14.SaveWishUseCase {
  MockSaveWishUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i3.ErrorProne<void>> call(
          {bool? shouldReplaceExisting = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #call, [], {#shouldReplaceExisting: shouldReplaceExisting}),
              returnValue:
                  Future<_i3.ErrorProne<void>>.value(_FakeErrorProne_1<void>()))
          as _i11.Future<_i3.ErrorProne<void>>);
}

/// A class which mocks [InitFormsStorageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitFormsStorageUseCase extends _i1.Mock
    implements _i15.InitFormsStorageUseCase {
  MockInitFormsStorageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call({_i9.Wish? wish = const _i9.Wish(topic: r'', title: r'')}) =>
      super.noSuchMethod(Invocation.method(#call, [], {#wish: wish}),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetWishTopicUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWishTopicUseCase extends _i1.Mock
    implements _i16.GetWishTopicUseCase {
  MockGetWishTopicUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String call() =>
      (super.noSuchMethod(Invocation.method(#call, []), returnValue: '')
          as String);
}

/// A class which mocks [AppRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRouter extends _i1.Mock implements _i17.AppRouter {
  MockAppRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i5.PageFactory> get pagesMap =>
      (super.noSuchMethod(Invocation.getter(#pagesMap),
              returnValue: <String, _i5.PageFactory>{})
          as Map<String, _i5.PageFactory>);
  @override
  List<_i5.RouteConfig> get routes =>
      (super.noSuchMethod(Invocation.getter(#routes),
          returnValue: <_i5.RouteConfig>[]) as List<_i5.RouteConfig>);
  @override
  _i4.RouteMatcher get matcher =>
      (super.noSuchMethod(Invocation.getter(#matcher),
          returnValue: _FakeRouteMatcher_2()) as _i4.RouteMatcher);
  @override
  _i4.RouteCollection get routeCollection =>
      (super.noSuchMethod(Invocation.getter(#routeCollection),
          returnValue: _FakeRouteCollection_3()) as _i4.RouteCollection);
  @override
  _i5.RouteData get routeData =>
      (super.noSuchMethod(Invocation.getter(#routeData),
          returnValue: _FakeRouteData_4()) as _i5.RouteData);
  @override
  bool get managedByWidget => (super
          .noSuchMethod(Invocation.getter(#managedByWidget), returnValue: false)
      as bool);
  @override
  _i5.PageBuilder get pageBuilder => (super.noSuchMethod(
          Invocation.getter(#pageBuilder),
          returnValue: (_i5.RouteData data) => _FakeAutoRoutePage_5<dynamic>())
      as _i5.PageBuilder);
  @override
  _i5.NavigationHistory get navigationHistory =>
      (super.noSuchMethod(Invocation.getter(#navigationHistory),
          returnValue: _FakeNavigationHistory_6()) as _i5.NavigationHistory);
  @override
  _i6.LocalKey get key => (super.noSuchMethod(Invocation.getter(#key),
      returnValue: _FakeLocalKey_7()) as _i6.LocalKey);
  @override
  _i7.PagelessRoutesObserver get pagelessRoutesObserver =>
      (super.noSuchMethod(Invocation.getter(#pagelessRoutesObserver),
              returnValue: _FakePagelessRoutesObserver_8())
          as _i7.PagelessRoutesObserver);
  @override
  int get stateHash =>
      (super.noSuchMethod(Invocation.getter(#stateHash), returnValue: 0)
          as int);
  @override
  _i6.GlobalKey<_i6.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(Invocation.getter(#navigatorKey),
              returnValue: _FakeGlobalKey_9<_i6.NavigatorState>())
          as _i6.GlobalKey<_i6.NavigatorState>);
  @override
  bool get canPopSelfOrChildren =>
      (super.noSuchMethod(Invocation.getter(#canPopSelfOrChildren),
          returnValue: false) as bool);
  @override
  _i5.RouteData get current => (super.noSuchMethod(Invocation.getter(#current),
      returnValue: _FakeRouteData_4()) as _i5.RouteData);
  @override
  _i5.RouteData get topRoute =>
      (super.noSuchMethod(Invocation.getter(#topRoute),
          returnValue: _FakeRouteData_4()) as _i5.RouteData);
  @override
  bool get hasPagelessTopRoute =>
      (super.noSuchMethod(Invocation.getter(#hasPagelessTopRoute),
          returnValue: false) as bool);
  @override
  List<_i5.AutoRoutePage<dynamic>> get stack =>
      (super.noSuchMethod(Invocation.getter(#stack),
              returnValue: <_i5.AutoRoutePage<dynamic>>[])
          as List<_i5.AutoRoutePage<dynamic>>);
  @override
  bool get hasEntries =>
      (super.noSuchMethod(Invocation.getter(#hasEntries), returnValue: false)
          as bool);
  @override
  List<_i5.RoutingController> get childControllers => (super.noSuchMethod(
      Invocation.getter(#childControllers),
      returnValue: <_i5.RoutingController>[]) as List<_i5.RoutingController>);
  @override
  List<_i5.RouteData> get stackData =>
      (super.noSuchMethod(Invocation.getter(#stackData),
          returnValue: <_i5.RouteData>[]) as List<_i5.RouteData>);
  @override
  bool get isTopMost =>
      (super.noSuchMethod(Invocation.getter(#isTopMost), returnValue: false)
          as bool);
  @override
  bool get canNavigateBack => (super
          .noSuchMethod(Invocation.getter(#canNavigateBack), returnValue: false)
      as bool);
  @override
  _i5.StackRouter get root => (super.noSuchMethod(Invocation.getter(#root),
      returnValue: _FakeStackRouter_10()) as _i5.StackRouter);
  @override
  bool get isRoot =>
      (super.noSuchMethod(Invocation.getter(#isRoot), returnValue: false)
          as bool);
  @override
  _i5.RouteMatch<dynamic> get topMatch => (super.noSuchMethod(
      Invocation.getter(#topMatch),
      returnValue: _FakeRouteMatch_11<dynamic>()) as _i5.RouteMatch<dynamic>);
  @override
  List<_i5.RouteMatch<dynamic>> get currentSegments =>
      (super.noSuchMethod(Invocation.getter(#currentSegments),
              returnValue: <_i5.RouteMatch<dynamic>>[])
          as List<_i5.RouteMatch<dynamic>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.AutoRouteInformationProvider routeInfoProvider(
          {_i6.RouteInformation? initialRouteInformation}) =>
      (super.noSuchMethod(
              Invocation.method(#routeInfoProvider, [],
                  {#initialRouteInformation: initialRouteInformation}),
              returnValue: _FakeAutoRouteInformationProvider_12())
          as _i5.AutoRouteInformationProvider);
  @override
  _i5.AutoRouterDelegate declarativeDelegate(
          {_i5.RoutesBuilder? routes,
          String? navRestorationScopeId,
          _i5.RoutePopCallBack? onPopRoute,
          _i5.OnNavigateCallBack? onNavigate,
          _i5.NavigatorObserversBuilder? navigatorObservers =
              _i18.AutoRouterDelegate.defaultNavigatorObserversBuilder}) =>
      (super.noSuchMethod(
          Invocation.method(#declarativeDelegate, [], {
            #routes: routes,
            #navRestorationScopeId: navRestorationScopeId,
            #onPopRoute: onPopRoute,
            #onNavigate: onNavigate,
            #navigatorObservers: navigatorObservers
          }),
          returnValue: _FakeAutoRouterDelegate_13()) as _i5.AutoRouterDelegate);
  @override
  _i5.AutoRouterDelegate delegate(
          {List<_i5.PageRouteInfo<dynamic>>? initialRoutes,
          String? initialDeepLink,
          String? navRestorationScopeId,
          _i6.WidgetBuilder? placeholder,
          _i5.NavigatorObserversBuilder? navigatorObservers =
              _i18.AutoRouterDelegate.defaultNavigatorObserversBuilder}) =>
      (super.noSuchMethod(
          Invocation.method(#delegate, [], {
            #initialRoutes: initialRoutes,
            #initialDeepLink: initialDeepLink,
            #navRestorationScopeId: navRestorationScopeId,
            #placeholder: placeholder,
            #navigatorObservers: navigatorObservers
          }),
          returnValue: _FakeAutoRouterDelegate_13()) as _i5.AutoRouterDelegate);
  @override
  _i5.DefaultRouteParser defaultRouteParser(
          {bool? includePrefixMatches = false}) =>
      (super.noSuchMethod(
          Invocation.method(#defaultRouteParser, [],
              {#includePrefixMatches: includePrefixMatches}),
          returnValue: _FakeDefaultRouteParser_14()) as _i5.DefaultRouteParser);
  @override
  void updateRouteData(_i5.RouteData? data) =>
      super.noSuchMethod(Invocation.method(#updateRouteData, [data]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i11.Future<T?> pushWidget<T extends Object?>(_i6.Widget? widget,
          {_i6.RouteTransitionsBuilder? transitionBuilder,
          bool? fullscreenDialog = false,
          Duration? transitionDuration = const Duration(milliseconds: 300)}) =>
      (super.noSuchMethod(
          Invocation.method(#pushWidget, [
            widget
          ], {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration
          }),
          returnValue: Future<T?>.value()) as _i11.Future<T?>);
  @override
  _i11.Future<T?> pushNativeRoute<T extends Object?>(_i6.Route<T>? route) =>
      (super.noSuchMethod(Invocation.method(#pushNativeRoute, [route]),
          returnValue: Future<T?>.value()) as _i11.Future<T?>);
  @override
  _i5.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) =>
      (super.noSuchMethod(
          Invocation.method(#topMostRouter, [],
              {#ignorePagelessRoutes: ignorePagelessRoutes}),
          returnValue: _FakeRoutingController_15()) as _i5.RoutingController);
  @override
  _i11.Future<bool> pop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#pop, [result]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  void popForced<T extends Object?>([T? result]) =>
      super.noSuchMethod(Invocation.method(#popForced, [result]),
          returnValueForMissingStub: null);
  @override
  bool removeLast() => (super.noSuchMethod(Invocation.method(#removeLast, []),
      returnValue: false) as bool);
  @override
  void removeRoute(_i5.RouteData? route, {bool? notify = true}) => super
      .noSuchMethod(Invocation.method(#removeRoute, [route], {#notify: notify}),
          returnValueForMissingStub: null);
  @override
  _i11.Future<T?> push<T extends Object?>(_i5.PageRouteInfo<dynamic>? route,
          {_i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#push, [route], {#onFailure: onFailure}),
          returnValue: Future<T?>.value()) as _i11.Future<T?>);
  @override
  _i11.Future<T?> replace<T extends Object?>(_i5.PageRouteInfo<dynamic>? route,
          {_i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#replace, [route], {#onFailure: onFailure}),
          returnValue: Future<T?>.value()) as _i11.Future<T?>);
  @override
  _i11.Future<void> pushAll(List<_i5.PageRouteInfo<dynamic>>? routes,
          {_i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
              Invocation.method(#pushAll, [routes], {#onFailure: onFailure}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<void> popAndPushAll(List<_i5.PageRouteInfo<dynamic>>? routes,
          {dynamic onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#popAndPushAll, [routes], {#onFailure: onFailure}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub:
              Future<void>.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> replaceAll(List<_i5.PageRouteInfo<dynamic>>? routes,
          {_i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
              Invocation.method(#replaceAll, [routes], {#onFailure: onFailure}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  void popUntilRoot() =>
      super.noSuchMethod(Invocation.method(#popUntilRoot, []),
          returnValueForMissingStub: null);
  @override
  _i11.Future<T?> popAndPush<T extends Object?, TO extends Object?>(
          _i5.PageRouteInfo<dynamic>? route,
          {TO? result,
          _i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(
              #popAndPush, [route], {#result: result, #onFailure: onFailure}),
          returnValue: Future<T?>.value()) as _i11.Future<T?>);
  @override
  bool removeUntil(_i5.RouteDataPredicate? predicate) =>
      (super.noSuchMethod(Invocation.method(#removeUntil, [predicate]),
          returnValue: false) as bool);
  @override
  void popUntil(_i6.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  bool removeWhere(_i5.RouteDataPredicate? predicate, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#removeWhere, [predicate], {#notify: notify}),
          returnValue: false) as bool);
  @override
  void updateDeclarativeRoutes(List<_i5.PageRouteInfo<dynamic>>? routes) =>
      super.noSuchMethod(Invocation.method(#updateDeclarativeRoutes, [routes]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> navigateAll(List<_i5.RouteMatch<dynamic>>? routes,
          {_i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#navigateAll, [routes], {#onFailure: onFailure}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub:
              Future<void>.value()) as _i11.Future<void>);
  @override
  _i11.Future<T?> pushAndPopUntil<T extends Object?>(
          _i5.PageRouteInfo<dynamic>? route,
          {_i6.RoutePredicate? predicate,
          _i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#pushAndPopUntil, [route],
              {#predicate: predicate, #onFailure: onFailure}),
          returnValue: Future<T?>.value()) as _i11.Future<T?>);
  @override
  _i11.Future<T?> replaceNamed<T extends Object?>(String? path,
          {bool? includePrefixMatches = false,
          _i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#replaceNamed, [
            path
          ], {
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure
          }),
          returnValue: Future<T?>.value()) as _i11.Future<T?>);
  @override
  _i11.Future<T?> pushNamed<T extends Object?>(String? path,
          {bool? includePrefixMatches = false,
          _i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamed, [
            path
          ], {
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure
          }),
          returnValue: Future<T?>.value()) as _i11.Future<T?>);
  @override
  void popUntilRouteWithName(String? name) =>
      super.noSuchMethod(Invocation.method(#popUntilRouteWithName, [name]),
          returnValueForMissingStub: null);
  @override
  void markUrlStateForReplace() =>
      super.noSuchMethod(Invocation.method(#markUrlStateForReplace, []),
          returnValueForMissingStub: null);
  @override
  void attachChildController(_i5.RoutingController? childController) =>
      super.noSuchMethod(
          Invocation.method(#attachChildController, [childController]),
          returnValueForMissingStub: null);
  @override
  void removeChildController(_i5.RoutingController? childController) =>
      super.noSuchMethod(
          Invocation.method(#removeChildController, [childController]),
          returnValueForMissingStub: null);
  @override
  void notifyAll({bool? forceUrlRebuild = false}) => super.noSuchMethod(
      Invocation.method(#notifyAll, [], {#forceUrlRebuild: forceUrlRebuild}),
      returnValueForMissingStub: null);
  @override
  bool isRouteActive(String? routeName) =>
      (super.noSuchMethod(Invocation.method(#isRouteActive, [routeName]),
          returnValue: false) as bool);
  @override
  bool isRouteDataActive(_i5.RouteData? data) =>
      (super.noSuchMethod(Invocation.method(#isRouteDataActive, [data]),
          returnValue: false) as bool);
  @override
  bool isPathActive(String? path) =>
      (super.noSuchMethod(Invocation.method(#isPathActive, [path]),
          returnValue: false) as bool);
  @override
  _i11.Future<dynamic> navigate(_i5.PageRouteInfo<dynamic>? route,
          {_i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
          Invocation.method(#navigate, [route], {#onFailure: onFailure}),
          returnValue: Future<dynamic>.value()) as _i11.Future<dynamic>);
  @override
  _i11.Future<void> navigateNamed(String? path,
          {bool? includePrefixMatches = false,
          _i5.OnNavigationFailure? onFailure}) =>
      (super.noSuchMethod(
              Invocation.method(#navigateNamed, [
                path
              ], {
                #includePrefixMatches: includePrefixMatches,
                #onFailure: onFailure
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  void navigateBack() =>
      super.noSuchMethod(Invocation.method(#navigateBack, []),
          returnValueForMissingStub: null);
  @override
  T? innerRouterOf<T extends _i5.RoutingController>(String? routeName) =>
      (super.noSuchMethod(Invocation.method(#innerRouterOf, [routeName]))
          as T?);
  @override
  _i11.Future<bool> popTop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#popTop, [result]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  void addListener(_i19.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i19.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
